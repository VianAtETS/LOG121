@startuml FormulairePaiement
' skinparam classAttributeIconSize 0
' left to right direction
' skinparam linetype ortho
skinparam defaultFontSize 14
skinparam classFontSize 16
skinparam noteFontSize 12

title Laboratoire #3 - Formulaire de Paiement - Diagramme de Classes

' Classe principale - Patron Médiateur
class MediateurFormulaire {
    - composantModePaiement: ComboBox<ModePaiement>
    - composantCarteCredit: VBox
    - composantCarteCadeau: VBox
    - composantOptionsLivraison: ComboBox<OptionLivraison>
    - composantAdresseLivraison: TextField
    - composantAdresseFacturation: TextField
    - composantMemeAdresse: CheckBox
    - strategiePaiement: StrategiePaiement
    + MediateurFormulaire()
    + initialiser()
    + notifierChangementModePaiement(mode: ModePaiement)
    + notifierMemeAdresse(active: boolean)
    + notifierChangementAdresseLivraison(adresse: String)
    - mettreAJourVisibilite(mode: ModePaiement)
    - mettreAJourOptionsLivraison(mode: ModePaiement)
    - synchroniserAdresses()
}

' Patron Strategy pour les modes de paiement
interface StrategiePaiement {
    + valider(): boolean
    + obtenirDonneesPaiement(): Map<String, String>
}

class StrategiePaiementCarteCredit implements StrategiePaiement {
    - carte: CarteCredit
    + StrategiePaiementCarteCredit(carte: CarteCredit)
    + valider(): boolean
    + obtenirDonneesPaiement(): Map<String, String>
    - validerNumero(): boolean
    - validerDateExpiration(): boolean
    - validerCodeSecurite(): boolean
}

class StrategiePaiementCarteCadeau implements StrategiePaiement {
    - carte: CarteCadeau
    + StrategiePaiementCarteCadeau(carte: CarteCadeau)
    + valider(): boolean
    + obtenirDonneesPaiement(): Map<String, String>
    - validerNumero(): boolean
}

class StrategiePaiementLivraison implements StrategiePaiement {
    + StrategiePaiementLivraison()
    + valider(): boolean
    + obtenirDonneesPaiement(): Map<String, String>
}

' Hiérarchie des Cartes
abstract class Carte {
    # numero: String
    + Carte()
    + definirNumero(numero: String)
    + obtenirNumero(): String
    + {abstract} validerNumero(): boolean
}

class CarteCredit extends Carte {
    - dateExpiration: String
    - codeSecurite: String
    + CarteCredit()
    + definirDateExpiration(date: String)
    + obtenirDateExpiration(): String
    + definirCodeSecurite(code: String)
    + obtenirCodeSecurite(): String
    + validerNumero(): boolean
    + validerDateExpiration(): boolean
    + validerCodeSecurite(): boolean
}

class CarteCadeau extends Carte {
    + CarteCadeau()
    + validerNumero(): boolean
}

' Patron Value Object pour l'adresse
class Adresse <<value object>> {
    - rue: String
    - ville: String
    - codePostal: String
    - pays: String
    + Adresse(rue: String, ville: String, codePostal: String, pays: String)
    + obtenirRue(): String
    + obtenirVille(): String
    + obtenirCodePostal(): String
    + obtenirPays(): String
    + versChaine(): String
    + equals(autre: Adresse): boolean
}

' Énumérations
enum ModePaiement {
    CARTE_CREDIT
    CARTE_CADEAU
    PAIEMENT_LIVRAISON
}

enum OptionLivraison {
    LIVRAISON_MAIN_PROPRE
    RENCONTRE_EXTERIEUR
    LAISSER_PORTE
}

' Relations Patron Strategy
MediateurFormulaire --> StrategiePaiement
StrategiePaiementCarteCredit --> CarteCredit
StrategiePaiementCarteCadeau --> CarteCadeau

' Relations Value Object
MediateurFormulaire ..> Adresse : utilise

' Relations Énumérations
MediateurFormulaire --> ModePaiement
MediateurFormulaire --> OptionLivraison

note right of MediateurFormulaire
  <b>Utilise les composants JavaFX:</b>
  - ComboBox<T>
  - TextField
  - CheckBox
  - VBox
  Ces classes n'ont pas besoin
  d'être détaillées dans l'UML
end note

note left of MediateurFormulaire
  <b>Responsabilités du Médiateur:</b>

  1. <b>Gestion de la visibilité:</b>
     Affiche/masque les champs selon
     le mode de paiement sélectionné

  2. <b>Gestion des options de livraison:</b>
     Désactive "LAISSER_PORTE" si
     mode = PAIEMENT_LIVRAISON

  3. <b>Synchronisation des adresses:</b>
     Copie automatiquement l'adresse
     de livraison vers facturation si
     l'option est cochée

  4. <b>Coordination des stratégies:</b>
     Instancie et utilise la bonne
     stratégie selon le mode choisi
end note

note right of StrategiePaiement
  <b>Patron Strategy:</b>
  Encapsule les algorithmes de validation
  selon le mode de paiement.

  Facilite l'ajout de nouveaux modes
  sans modifier le médiateur.
end note

note top of Adresse
  <b>Value Object immuable:</b>
  L'égalité basée sur les valeurs.
  Utilisé pour livraison et facturation.
end note

note bottom of Carte
  <b>Validation polymorphique:</b>
  Chaque type définit ses règles:
  - CarteCredit: numéro, date, CVV
  - CarteCadeau: numéro uniquement
end note

note bottom of ModePaiement
  <b>Impacts sur l'interface:</b>

  CARTE_CREDIT => Champs carte de crédit visibles
  CARTE_CADEAU => Champs carte cadeau visibles
  PAIEMENT_LIVRAISON:
    => Tous champs masqués
    => LAISSER_PORTE désactivé
end note

@enduml
