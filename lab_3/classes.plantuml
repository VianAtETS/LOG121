@startuml FormulairePaiement
' skinparam classAttributeIconSize 0
left to right direction
skinparam linetype ortho
skinparam defaultFontSize 14
skinparam classFontSize 16
skinparam noteFontSize 12

title Laboratoire #3 - Formulaire de Paiement - Diagramme de Classes

' Enums
enum ModePaiement {
    CARTE_CREDIT
    CARTE_CADEAU
    PAIEMENT_LIVRAISON
}

enum OptionLivraison {
    LIVRAISON_MAIN_PROPRE
    RENCONTRE_EXTERIEUR
    LAISSER_PORTE
}

' Classes métier
abstract class Carte {
    - numero: String
    + Carte(numero: String)
    + valider(): boolean
    # validerNumero(): boolean
}

class CarteCredit extends Carte {
    - dateExpiration: String
    - codeSecurite: String
    + CarteCredit(numero: String, dateExpiration: String, codeSecurite: String)
    + valider(): boolean
    - validerDateExpiration(): boolean
    - validerCodeSecurite(): boolean
}

class CarteCadeau extends Carte {
    + CarteCadeau(numero: String)
    + valider(): boolean
}

class Adresse {
    - rue: String
    - ville: String
    - codePostal: String
    - pays: String
    - region: String
    + Adresse(rue: String, ville: String, codePostal: String, pays: String)
    + Adresse(rue: String, ville: String, codePostal: String, pays: String, region: String)
    + valider(): boolean
    + toString(): String
    + equals(autre: Adresse): boolean
}

class FormulairePaiement {
    - modePaiement: ModePaiement
    - carteCredit: CarteCredit
    - carteCadeau: CarteCadeau
    - adresseLivraison: Adresse
    - adresseFacturation: Adresse
    - memeAdresse: boolean
    - optionLivraison: OptionLivraison
    + validerFormulaire(): boolean
    + getModePaiement(): ModePaiement
    + setModePaiement(methode: ModePaiement): void
    + getCarteCredit(): CarteCredit
    + setCarteCredit(carte: CarteCredit): void
    + getCarteCadeau(): CarteCadeau
    + setCarteCadeau(carte: CarteCadeau): void
    + getAdresseLivraison(): Adresse
    + setAdresseLivraison(adresse: Adresse): void
    + getAdresseFacturation(): Adresse
    + setAdresseFacturation(adresse: Adresse): void
    + isMemeAdresse(): boolean
    + setMemeAdresse(meme: boolean): void
    + getOptionLivraison(): OptionLivraison
    + setOptionLivraison(option: OptionLivraison): void
}

' Interface Composant simplifiée
interface Composant {
    + setMediateur(mediateur: Mediateur): void
    + getNom(): String
}

' Interface Mediateur
interface Mediateur {
    + ajouterComposant(composant: Composant): void
    + notifier(emetteur: Composant, evenement: String): void
}

' Classe concrète du Médiateur
class MediateurFormulairePaiement {
    - modePaiementCombo: ComboBox
    - champCarteCredit: TextField[]
    - champCarteCadeau: TextField
    - champAdresseLivraison: TextField
    - champAdresseFacturation: TextField
    - caseACocherMemeAdresse: CheckBox
    - optionLivraisonCombo: ComboBox
    - formulairePaiement: FormulairePaiement

    + ajouterComposant(composant: Composant): void
    + notifier(emetteur: Composant, evenement: String): void
    + getFormulairePaiement(): FormulairePaiement
    - gererChangementModePaiement(): void
    - gererChangementMemeAdresse(): void
    - gererChangementAdresseLivraison(): void
    - mettreAJourVisibiliteChamps(methode: ModePaiement): void
    - mettreAJourOptionsLivraison(optionLivraison: OptionLivraison): void
    - mettreAJourDonneesFormulaire(): void
    - validerFormulaire(): void
}

' Composants JavaFX simplifiés
class ComboBox {
    - mediateur: Mediateur
    - nom: String
    + setMediateur(mediateur: Mediateur): void
    + getNom(): String
    + getValue(): Object
}

class TextField {
    - mediateur: Mediateur
    - nom: String
    + setMediateur(mediateur: Mediateur): void
    + getNom(): String
    + getText(): String
    + setText(texte: String): void
    + setVisible(visible: boolean): void
    + setDisable(desactive: boolean): void
}

class CheckBox {
    - mediateur: Mediateur
    - nom: String
    + setMediateur(mediateur: Mediateur): void
    + getNom(): String
    + isSelected(): boolean
}

' Relations
Mediateur <|.. MediateurFormulairePaiement
Composant <|.. ComboBox
Composant <|.. TextField
Composant <|.. CheckBox

MediateurFormulairePaiement o-- "1" ComboBox : modePaiementCombo
MediateurFormulairePaiement o-- "3" TextField : champCarteCredit
MediateurFormulairePaiement o-- "1" TextField : champCarteCadeau
MediateurFormulairePaiement o-- "1" TextField : champAdresseLivraison
MediateurFormulairePaiement o-- "1" TextField : champAdresseFacturation
MediateurFormulairePaiement o-- "1" CheckBox : caseACocherMemeAdresse
MediateurFormulairePaiement o-- "1" ComboBox : optionLivraisonCombo

ComboBox --> Mediateur : notifier
TextField --> Mediateur : notifier
CheckBox --> Mediateur : notifier

MediateurFormulairePaiement ..> ModePaiement : utilise
MediateurFormulairePaiement ..> OptionLivraison : utilise

MediateurFormulairePaiement o-- "1" FormulairePaiement : gère

FormulairePaiement *-- "0..1" CarteCredit
FormulairePaiement *-- "0..1" CarteCadeau
FormulairePaiement *-- "1" Adresse : adresseLivraison
FormulairePaiement *-- "1" Adresse : adresseFacturation
FormulairePaiement --> ModePaiement
FormulairePaiement --> OptionLivraison

note top of MediateurFormulairePaiement
    Le médiateur gère toute la logique
    d'interaction via la méthode notifier().

    Événements possibles:
    - "MOYEN_PAIEMENT_CHANGE"
    - "MEME_ADRESSE_CHANGE"
    - "ADRESSE_LIVRAISON_CHANGE"
end note

note bottom of ModePaiement
    Énumération pour les
    3 modes de paiement
end note

note top of CarteCredit
    Contient la logique de validation
    pour les numéros de carte, date
    d'expiration et CVV
end note

note bottom of CarteCadeau
    Contient la logique de validation
    pour les numéros de carte cadeau
end note

note left of FormulairePaiement
    Modèle de données central qui
    contient toutes les informations
    du formulaire. Le médiateur
    synchronise l'UI avec ce modèle.
end note

note bottom of OptionLivraison
    Énumération pour les
    3 options de livraison
end note

@enduml
